version: '3.8'
services:
#  mental-health-data-engineering-app:
#    build: ./docker/dockerfile
#    ports:
#    - "8080:8080"
  metabase:
    image: metabase/metabase
    ports:
        - "3000:3000"

  postgres:
    image: postgres:13.3
    environment:
        - POSTGRES_USER=airflow
        - POSTGRES_PASSWORD=airflow
        - POSTGRES_DB=airflow
    logging:
      options:
          max-size: 10m
          max-file: "3"

  nifi:
    image: apache/nifi:latest
    ports:
        - "9300:9300"

  scheduler:
    image: apache/airflow
    command: scheduler
    deploy:
    restart: on-failure
    depends_on:
        - postgres
    env_file:
        - .env
    volumes:
      - ./airflow/dags:/opt/airflow/dags
      - ./airflow/logs:/opt/airflow/logs
      - ./requirements.txt:/requirements.txt

  webserver:
      image: apache/airflow
      entrypoint: ./scripts/entrypoint.sh
      deploy:
      restart: on-failure
      depends_on:
          - postgres
          - scheduler
      env_file:
          - .env
      volumes:
        - ./airflow/dags:/opt/airflow/dags
        - ./airflow/logs:/opt/airflow/logs
        - ./scripts:/opt/airflow/scripts
      ports:
        - "8081:8081"
      command: webserver
      healthcheck:
        test: [ "CMD-SHELL", "[ -f /usr/local/airflow/airflow-webserver.pid ]" ]
        interval: 30s
        timeout: 30s
        retries: 3

  elasticsearch:
    build:
      context: ../elasticsearch
      args:
        ELK_VERSION: $ELK_VERSION
    volumes:
      - type: bind
        source: ./elasticsearch/config/elasticsearch.yml
        target: /usr/share/elasticsearch/config/elasticsearch.yml
        read_only: true
      - type: volume
        source: elasticsearch
        target: /usr/share/elasticsearch/data
    ports:
      - "9200:9200"
      - "9300:9300"
    environment:
      node.name: OnlyNode
      cluster.name: mental-health-data-engineering-app-es-docker-cluster
      ES_JAVA_OPTS: "-Xmx256m -Xms256m"
      ELASTIC_PASSWORD: changeme
      # Use single node discovery in order to disable production mode and avoid bootstrap checks.
      # see: https://www.elastic.co/guide/en/elasticsearch/reference/7.11/bootstrap-checks.html
      discovery.type: single-node
    networks:
      - elk

  logstash:
    build:
      context: ../logstash
      args:
        ELK_VERSION: $ELK_VERSION
    volumes:
      - type: bind
        source: ./logstash/config/logstash.yml
        target: /usr/share/logstash/config/logstash.yml
        read_only: true
      - type: bind
        source: ./logstash/pipeline
        target: /usr/share/logstash/pipeline
        read_only: true
    ports:
      - "5044:5044"
      - "5000:5000/tcp"
      - "5000:5000/udp"
      - "9600:9600"
    environment:
      LS_JAVA_OPTS: "-Xmx256m -Xms256m"
    networks:
      - elk
    depends_on:
      - elasticsearch

  kibana:
    build:
      context: ../kibana
      args:
        ELK_VERSION: $ELK_VERSION
    volumes:
      - type: bind
        source: ./kibana/config/kibana.yml
        target: /usr/share/kibana/config/kibana.yml
        read_only: true
    ports:
      - "5601:5601"
    networks:
      - elk
    depends_on:
      - elasticsearch

networks:
  elk:
    driver: bridge

volumes:
  elasticsearch:
